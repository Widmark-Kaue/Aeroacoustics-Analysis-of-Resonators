/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  3.0.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
#include "../configDict"

fluxScheme          Kurganov;

ddtSchemes
{
    default         $defaultTimeScheme;
}

gradSchemes
{
    default         Gauss linear;
    grad(U)         cellMDLimited Gauss linear 0.33;
    grad(p)         Gauss linear 0.33;
    grad(k)         cellMDLimited Gauss linear 1;
    grad(omega)     cellMDLimited Gauss linear 1;
}

// defaultAdvScheme     vanLeer;
// defaultAdvSchemeV    vanLeerV;

divSchemes
{
    default                                         none;

    //momentum equation
    div(phi,U)                                      Gauss $defaultAdvSchemeV;

    //energy equation
    div(phi,h)                                      Gauss $defaultAdvScheme;
    div(phi,K)                                      Gauss $defaultAdvScheme;
    div(phi,e)                                      Gauss limitedLinear 1;
    div(phi,Ekp)                                    Gauss limitedLinear 1;
    div(phi,k)                                      Gauss limitedLinear 1;
    div(phi,omega)                                  Gauss limitedLinear 1;
   
    //continuity equation
    div(phid,p)                                     Gauss $defaultAdvScheme;

    div(((rho*nuEff)*dev2(T(grad(U)))))             Gauss linear;

    div(meshPhi,p)                                  Gauss vanLeer;
    div((meshPhi*interpolate(thermo:psi)),pcorr)    Gauss vanLeer;

    div(((rho*U)*U))                                Gauss linear; //FWH analogy

    div(tauMC)                                      Gauss linear;
}

laplacianSchemes
{
    default                                         Gauss linear corrected;
}

interpolationSchemes
{
    default                                         linear;

    reconstruct(rho)                                $defaultIntScheme;
    reconstruct(psi)                                $defaultIntScheme;
    reconstruct(p)                                  $defaultIntScheme;
    reconstruct(T)                                  $defaultIntScheme;
    reconstruct(U)                                  $defaultIntSchemeV;
    reconstruct(rho*U)                              $defaultIntSchemeV;
    reconstruct(Dp)                                 $defaultIntScheme;
}

snGradSchemes
{
    default                                         corrected;
}

fluxRequired
{
    p;
    pcorr;
}

wallDist
{
    method meshWave;
}


// ************************************************************************* //
